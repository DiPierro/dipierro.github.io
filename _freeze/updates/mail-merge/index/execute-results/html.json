{
  "hash": "cf14efdf75051ffb956f9ef5e3833467",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Code: A neat mail merge trick in R\"\ndate: \"2025-07-26\"\ncategories: [code]\n---\n\nWhile reporting a recent story, I wanted to send customized versions of the same email to dozens of potential sources. It was a classic use case for [mail merge](https://support.google.com/mail/answer/12921167?hl=en) and, since I was already working with a spreadsheet that included prospective sources' names and emails in R, I wondered: Could I run a mail merge without ever leaving RStudio?\n\nIt turns out the answer to this question is a resounding \"yes\" -- and here's how I did it. \n\n# 1: Configure Gmail.\n\nThis was the trickiest part. I started by setting up [two-factor authentication](https://support.google.com/accounts/answer/185839?hl=en&co=GENIE.Platform%3DDesktop) and then [created an app password](https://support.google.com/mail/answer/185833?hl=en). I'll use the password in the final step to send emails from R.\n\nNext, to avoid including my app password in published scripts, I stashed it in my .Renviron file, saving it as the environmental variable `GMAIL_APP_PW`. If you get tripped up looking for your .Renviron, you can always pull it with `usethis::edit_r_environ()`.\n\n# 2: Format emails.\n\nFrom there, all I had to do was read in a csv file with names and emails, create an email template and use string substitution to customize each message.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Libraries\nlibrary(tidyverse)\nlibrary(curl)\nlibrary(here)\n\n# Parameters\nfile_in <- here(\"updates/mail-merge/example.csv\")\npw <- Sys.getenv(\"GMAIL_APP_PW\") \nsender <- \"adipierro@edsource.org\"\n\n# Code\n\n## Read in file of recipients\nrecipients <- read_csv(file_in)\n\n## Write an email template\ntemplate <- \"\nFrom: 'Amy DiPierro' <adipierro@edsource.org>\nTo: '{first_name} {last_name}' <{email}>\nSubject: Hello, {first_name}!\n\nDear {first_name},\n\nHow's it going at {employer}?\n\nCheers,\nAmy\n\"\n\n# Use string formatting to customize each email.\nmessage <- recipients %>% str_glue_data(template)\n\n# Extract list of recipients' emails\nemails <- recipients %>% pull(email)\n```\n:::\n\nHere's the original data I used to send test emails to myself:\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n|first_name |last_name |email                  |employer |\n|:----------|:---------|:----------------------|:--------|\n|Amy        |DiPierro  |adipierro@edsource.org |EdSource |\n|Mya        |DePriori  |adipierro@edsource.org |CodeUser |\n\n\n:::\n:::\n\n\nAnd here's an example of how the email template looks after string formatting:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nFrom: 'Amy DiPierro' <adipierro@edsource.org>\nTo: 'Mya DePriori' <adipierro@edsource.org>\nSubject: Hello, Mya!\n\nDear Mya,\n\nHow's it going at CodeUser?\n\nCheers,\nAmy\n```\n\n\n:::\n:::\n\n\n# 3: Send emails!\n\nFinally, I used the `send_mail` function from R's `curl` library  to email each customized message to the right recipient. In the code below, I wrap `send_mail` in the `purrr` function `map2`, which loops through the list of customized messages and emails simultaneously.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Send all emails\nmap2(\n  .x = message,\n  .y = emails,\n  .f = ~ send_mail(\n    mail_from = sender,\n    mail_rcpt = .y,\n    message = .x,\n    smtp_server = \"smtps://smtp.gmail.com\",\n    username = sender,\n    password  = pw,\n    verbose = FALSE\n  )\n)\n```\n:::\n\n\nAnd that's it. Within a few moments, my test emails hit my inbox.\n\nFound a bug? Got a comment, criticism or suggestion for improvement? Drop me a note: `adipierro.edsource.org`.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}